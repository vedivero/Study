1.객체와 클래스에 대한 설명으로 틀린 것은 무엇입니까?
	1)클래스는 객체를 생성하기 위한  설계도(청사진)과 같은 것이다.
	2)new 연산자로 클래스의 생성자를 호출함으로써 객체가 생성된다.
	3)하나의 클래스로 하나의 객체만 생성할 수 있다. //여러개의 호출 가능
	4)객체는 클래스의 인스턴스이다.
	
2.클래스의 구성 멤버가 아닌 것은?
	1)Field
	2)Constructor
	3)method
	4)local variable	//x 
	
3.Field, Constructor, Method에 대한 설명으로 틀린 것은?
	1)Field는 객체의 data를 저장한다.
	2)Constructor는 객체의 초기화를 담당한다.
	3)Method는 객체의 동작 부분으로 실행 코드를 가지고 있는 block이다.
	4)Class는 반드시 Field와 method를 가져야 한다. //x 둘 중 하나만 있는 class도 있다.
	
4.Field에 대한 설명으로 틀린 것은?
	1)Field는 method에서 사용할 수 있다.
	2)Instance Field초기화는 생성자에서 할 수 있다.
	3)Field는 반드시 생성자 선언 전에 선언되어야 한다.	//생성자 선언 후에도 Field선언이 가능
	4)Field는 초기값을 주지 않더라도 기본값으로 자동 초기화된다.
		정수 = 0, 실수 = 0.0, boolean = false, 참조 타입 = null
		
5.생성자에 대한 설명으로 틀린 것은?
	1)객체를 생성하려면 생성자 호출이 반드시 필요한 것은 아니다.	
		//객체를 생성하려면 생성자 호출이 반드시 필요하다
	2)생성자는 다른 생성자를 호출하기 위해 this()를 사용할 수 있다.
		this() = 또 다른 자신의 생성자 호출
	3)생성자가 선언되지 않으면 컴파일러가 기본 생성자를 추가한다.
		매개값이 없는 기본 생성자를 추가한다.
	4)외부에서 객체를 생성할 수 없도록 생성자에 private접근 제한자를 붙일 수 있다.
	
6.메소드에 대한 설명으로 틀린 것은?
	1)리턴값이 없는 메소드는 리턴타입을 void로 해야한다.
	2)리턴타입이 있는 메소드는 리턴값을 지정하기 위해 반드시 return문이 있어야 한다.
	3)매개값의 수를 모를 경우 "..."를 이용해서 매개변수를 선언할 수 있다. 
		= 배열타입으로 선언하는 것과 동일한 방법
	4)메소드의 이름은 중복해서 선언할 수 없다.
		//메소드 이름은 중복해서 선언가능 단, 조건(매개 변수의 수, 매개변수의 타입, 순서)=오버로딩
		
7.메소드 오버로딩에 대한 설명으로 틀린 것은?
	1)동일한 이름의 메소드를 여러 개 선언하는 것을 말한다.
	2)반드시 리턴타입이 달라야 한다.	//리턴 타입은 같아도 된다.
	3)매개변수의 타입, 수, 순서를 다르게 선언해야 한다.
	4)매개값의 타입 및 수에 따라 호출될 메소드가 선택된다.
	
8.인스턴스 멤버와 정적 멤버에 대한 설명으로 틀린 것은?
	1)정적 멤버는 static으로 선언된 필드와 메소드를 말한다.
	2)인스턴스 필드는 생성자 및 정적 블록에서 초기화 될 수 있다.
		//인스턴스 필드는 객체안에 있는 필드이기 때문에 객체가 없이는 사용할 수 없다
		    생성자 안에서는 사용될 수 있지만 정적 블록( static{ })객체 생성전에
		    실행이 되기 때문에 사용 불가능
	3)정적 필드와 정적 메소드는 객체 생성없이 클래스를 통해 접근할 수 있다.
	4)인스턴스 필드와 메소드는 객체를 생성하고 사용해야 한다.
	
9.final필드와 상수(static final)에 대한 설명으로 틀린 것은?
	1)final필드와 상수는 초기값이 저장되면 값을 변경할 수 없다.
	2)final필드와 상수는 생성자에서 초기화 될 수 있다.
		//상수는 생성자에서 초기화 될 수 없다.
		    상수는 final필드이기 때문에 선언할 때 값을 부여하든지
		    정적 블록에서 초기화를 해줘야 한다.
		    생성자에서는 초기화 할 수 없다. = 객체를 만들면서 초기화하는 동작이기 때문
		  (단순한 final 필드는 생성자에서 초기화가 가능하다)
	3)상수의 이름은 대문자로 작성하는 것이 관례다.
	4)상수는 객체 생성없이 클래스를 통해 사용할 수 있다. 
		ex) class.상수명

10.다음 클래스에서 해당 멤버가 필드, 생성자, 메소드 중 어떤 것인지 적으시오.

	public class Member{
	
		private String name;
			Field
		public Member(String name){ }
			Class name과 동일하고 ,return타입이 없이 선언된 실행 블록 = 생성자
		public void setName(String name){ }
			return타입 있다 = 메소드	
	}
	
11.외부에서 받은 data로 member의 필드를 초기화하려면 생성자를 어떻게 선언해야 하는가?

	Member(String name, String id){
		this.name = name;
		this id = id;
	}
	
12.Member 클래스에 login()메서드와 logout메소드를 선언하려고 한다.
   login()메소드를 호출할 때 매개값으로 id,password를 제공하고
   logout()메소드는 id만 매개값으로 제공한다.
   Member클래스와 login(),logout()메소드를 선언하시오
   
  	boolean login(String id, String password){
  		if(id.eqals("hong") && password.equals("12345")){	//문자열 비교 = equals사용
  			return true;
  		}else{
  			return false;
  	}
  	
  	void logout(String id){
		System.out.println("Success Logout");
  	}